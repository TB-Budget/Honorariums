class "";

import СИС2 classes СтроковыеФункции;

inclass public

  func НачисленоГонораров_ЗаГод (локУчреждение: Базовый.Данные.Субъект; локГодСведений: integer; локСотрудник: Базовый.Данные.Субъект): numeric;
    var locFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      locFlt[1] = 'Назначение.Сотрудник.Физлицо=' + Str(локСотрудник.Физлицо);
      locFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(локГодСведений) + '"';
      locFlt[3] = 'Расчет.Подшивка.Завершен';
      locFlt[4] = 'ВидНачисления.ТипРасчета.Код="' + Константы.КодШаблонаГонорар + '"';
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      Result = CalcAggregates('Sum(СуммаКУчету)') as numeric;
    end;
  end;

  func НачисленоГонораров_ЗаГодБезСтажа (локУчреждение: Базовый.Данные.Субъект; локГодСведений: integer; локСотрудник: Базовый.Данные.Субъект): numeric;
    var locFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Расчет]) do
      locFlt[1] = 'Сотрудник.Физлицо=' + Str(локСотрудник.Физлицо);
      locFlt[2] = 'SubStr(УчетныйПериод.Код,1,4)="' + Str(локГодСведений) + '"';
      locFlt[3] = 'Подшивка.Завершен';
      locFlt[4] = 'ГруппаНачислений="' + Str(Бюджет_ЗПиДД.Константы.ГруппаОперацийГПС) + '"';
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      Select;
      while not Eof do
        if РасчетВнеСтажа(Current):
          Result = Result + НачисленоГонораров_ВРасчете (Current);
        fi;
        Next;
      od;
    end;
  end;

  func НачисленоГонораров_ВРасчете (локАктРасчета: Бюджет_ЗПиДД.РасчетныеОперации.Расчет): numeric;
    var locFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      locFlt[1] = 'Расчет.ExtId="' + локАктРасчета.ExtId + '"';
      locFlt[2] = 'ВидНачисления.ТипРасчета.Код="' + Константы.КодШаблонаГонорар + '"';
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      Result = CalcAggregates('Sum(СуммаКУчету)') as numeric;
    end;
  end;

  func БазаОпсГонораров_ВРасчете (локАктРасчета: Бюджет_ЗПиДД.РасчетныеОперации.Расчет): numeric;
    var locFlt: string[];
    var локВРасчетОпс: logical;
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      locFlt[1] = 'Расчет.ExtId="' + локАктРасчета.ExtId + '"';
      locFlt[2] = 'ВидНачисления.ТипРасчета.Код="' + Константы.КодШаблонаГонорар + '"';
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      Select;
      while not Eof do
        if Current.ВидНачисления.ПерекрытьВзнос:
          локВРасчетОпс = Current.ВидНачисления.ОПС;
        else
          локВРасчетОпс = Current.ВидНачисления.ТипРасчета.ОПС;
        fi;
        if локВРасчетОпс:
          Result = Result + Current.СуммаКУчету;
        fi;
        Next;
      od;
    end;
  end;

  func ВзносовОпсГонораров_ВРасчете (локАктРасчета: Бюджет_ЗПиДД.РасчетныеОперации.Расчет; локБаза: numeric): numeric;
    var locFlt: string[];
    var _База: numeric;
    if    (локБаза <> nil) and (локАктРасчета.ВсегоНачислено = локБаза):  -- совсем без проверки (быстрее)
      with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Взнос]) do
        locFlt[1] = 'Расчет.ExtId="' + локАктРасчета.ExtId + '"';
        locFlt[2] = 'КодФонда="' + Бюджет_ЗПиДД.Константы.ПФР + '"';
        locFlt[3] = 'КодВзноса="' + Бюджет_ЗПиДД.Константы.СЧ_ОТ + '"';
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        Result = CalcAggregates('Sum(СуммаКУчету)') as numeric;
      end;
    elsif (локБаза <> nil) and (локАктРасчета.ВсегоНачислено <> локБаза): -- расчет доли
      with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Взнос]) do
        locFlt[1] = 'Расчет.ExtId="' + локАктРасчета.ExtId + '"';
        locFlt[2] = 'КодФонда="' + Бюджет_ЗПиДД.Константы.ПФР + '"';
        locFlt[3] = 'КодВзноса="' + Бюджет_ЗПиДД.Константы.СЧ_ОТ + '"';
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        _База = CalcAggregates('Sum(База)') as numeric;
        Result = CalcAggregates('Sum(СуммаКУчету)') as numeric;
        Result = (локБаза/_База) * Result;
      end;
    elsif (локБаза = nil): -- полный расчет
      _База = БазаОпсГонораров_ВРасчете (локАктРасчета);
      if (_База <> nil):
        Result = ВзносовОпсГонораров_ВРасчете (локАктРасчета, _База);
      fi;
    fi;
  end;

  --@doc Метод проверяет - велся ли учет пенсионного стажа на период, охваченный актом расчета
  --@doc Для этого нужно убедиться, что форма назначения для всех ненулевых выплат типа гонорар - это "подряд" (00004)
  --@doc и других форм назначения кроме "подряд" в этот период нет
  func РасчетВнеСтажа (локАктРасчета: Бюджет_ЗПиДД.РасчетныеОперации.Расчет): logical;
    var locFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      Filter = 'Расчет.ExtId="' + локАктРасчета.ExtId + '"';
      Result = (Count > 0); -- потенциально - ДА
      Select;
      while not Eof do
        Result = (Current.Назначение.ПериодРаботы.ФормаЗачисления.Код = '00004');
        if (not Result):
          Break;
        fi;
        Next;
      od;
    end;
    -- доп.контроль - проверка, что сотрудник не имеет параллельного зачисления
    if Result:
      with Query.Create([Бюджет_Персонал.АтрибутыСотрудника.ПериодРаботы]) do
        locFlt[1] = 'Сотрудник=' + Str(локАктРасчета.Сотрудник);
        locFlt[2] = 'ФормаЗачисления.Код in ["00000","00001","00002","00003"]';
        locFlt[3] = ТББ_Базовый.Фильтры.ФильтрПоДатам(локАктРасчета.ДатаНачала, локАктРасчета.ДатаОкончания);
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        Result = (not RecordsExists);
      end;
    fi;
  end;

  --@doc Фикисрованный размер страхового взноса
  func ФРСВ (локГод: integer): numeric;
    var локДатаЗапроса: date;
    if (локГод > nil):
      локДатаЗапроса = Dat(1, 1, локГод);
      Result = Round((РеглКонстанта('МРОТ', локДатаЗапроса) * 0.26 * 12), 2);
    fi;
  end;

inclass private

  func РеглКонстанта (locName: string; locDate: date): numeric;
    Result = 0;
    if not (nil in [locName,locDate]):
      with Query.Create([Kernel.Vars.Float]) do
        Filter = '(Переменная = "' + locName +'") and (Дата <= ' + Str(locDate) + ')';
        Order = 'Дата-';
        Select;
        if RecordsExists:
          Return Current.Значение;
        fi;
      end;
    fi;
  end;

end