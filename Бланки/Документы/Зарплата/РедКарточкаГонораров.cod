class inherited ТББ_Базовый.Базовые.БазовыйБланкДокумент "Карточка выплат вознаграждений автору", editor Документы.Зарплата.КарточкаГонораров;

import СИС2 classes Функции;

inclass public

  const СтандартноеКоличествоПозицийСтр1: integer = 20;
  const СтандартноеКоличествоПозицийСтр2: integer = 30;

inobject private
  var Интерфейс: Документы.Зарплата.интКарточкаГонораров;
  var ВидОдинЛист: logical;

--{{ Вспомогательные методы, не являющиеся прямыми обработчиками событий

  --@doc Программное создание секции формы из элементов конструктора
  --@doc locFrameRecipient - целевой фрейм (в котором создается новая секция)
  --@doc locSectionDonor - секция-образец
  --@doc locRowsCount - количество строк в новой секции (корректно, если секция-образец содержит только 1 строку)
  func CreateSectionData(locFrameRecipient: TemplateFrame; locSectionDonor: TemplateSection; locRowsCount: integer = 0): TemplateSection;
    var locSectionData: TemplateSection;
    locSectionData = locFrameRecipient.AddSection;
    locSectionData.Assign(locSectionDonor);
    if (locRowsCount > 1):
      CloneFirstRow(locSectionData, locRowsCount);
    fi;
    Return locSectionData;
  end;

  proc МодифициоватьШаблон_Стр1;
    var locFrameData, locFrameDonor: TemplateFrame;
    var p, ps, pf, t: integer;
    var ВсегоСекцийВоФрейме: integer; -- на момент модифиации
    locFrameDonor = Template.FrameByName['фреймШаблоныСекций'];
    locFrameData = Template.FrameByName['фреймСтр1_Расчеты'];
    Template.BeginModify;
    if locFrameData.Clear:
      CreateSectionData(locFrameData, ПолучитьСекциюФреймаПоИмени(locFrameDonor, 'секцРасчеты_Заголовок1'));
      CreateSectionData(locFrameData, ПолучитьСекциюФреймаПоИмени(locFrameDonor, 'секцРасчеты'), СтандартноеКоличествоПозицийСтр1);
      ps = 1;
      pf = СтандартноеКоличествоПозицийСтр1;
      ВсегоСекцийВоФрейме = locFrameData.SectionsCount;
      t = 0;
      for p = ps .. pf do
        t = t + 1;
        if (Интерфейс.ПозицияИсторииРасчетов(t) <> nil):
          locFrameData.Section[ВсегоСекцийВоФрейме].Row[p].Tag = Интерфейс.ПозицияИсторииРасчетов(t);
        else
          locFrameData.Section[ВсегоСекцийВоФрейме].Row[p].Tag = КарточкаГонораров.клТегСтроки.Create;
        fi;
      od;
      CreateSectionData(locFrameData, ПолучитьСекциюФреймаПоИмени(locFrameDonor, 'секцПоследняя'));
    fi;
    Template.EndModify;
  end;

  proc МодифициоватьШаблон_Стр2;
    var locFrameData, locFrameDonor: TemplateFrame;
    var p, ps, pf, t: integer;
    var ВсегоСекцийВоФрейме: integer; -- на момент модифиации
    locFrameDonor = Template.FrameByName['фреймШаблоныСекций'];
    locFrameData = Template.FrameByName['фреймСтр2'];
    Template.BeginModify;
    if locFrameData.Clear:
      CreateSectionData(locFrameData, ПолучитьСекциюФреймаПоИмени(locFrameDonor, 'секцРасчеты_ПодКолонтитулСтр2'));
      CreateSectionData(locFrameData, ПолучитьСекциюФреймаПоИмени(locFrameDonor, 'секцРасчеты_Заголовок1'));
      CreateSectionData(locFrameData, ПолучитьСекциюФреймаПоИмени(locFrameDonor, 'секцРасчеты'), СтандартноеКоличествоПозицийСтр2);
      ps = 1;
      pf = СтандартноеКоличествоПозицийСтр2;
      ВсегоСекцийВоФрейме = locFrameData.SectionsCount;
      t = СтандартноеКоличествоПозицийСтр1;
      for p = ps .. pf do
        t = t + 1;
        if (Интерфейс.ПозицияИсторииРасчетов(t) <> nil):
          locFrameData.Section[ВсегоСекцийВоФрейме].Row[p].Tag = Интерфейс.ПозицияИсторииРасчетов(t);
        else
          locFrameData.Section[ВсегоСекцийВоФрейме].Row[p].Tag = КарточкаГонораров.клТегСтроки.Create;
        fi;
      od;
      CreateSectionData(locFrameData, ПолучитьСекциюФреймаПоИмени(locFrameDonor, 'секцПодписи'));
    fi;
    Template.EndModify;
  end;


  proc МодифициоватьШаблон;
    МодифициоватьШаблон_Стр1;
    МодифициоватьШаблон_Стр2;
  end;

  --@doc Метод вызывается при переключении режимов один лист / два листа
  proc ВидФормы;
    var locFrame: TemplateFrame;
    locFrame = Template.FrameByName['фреймЗакладки'];
    locFrame.Orientation = if(ВидОдинЛист, Template.Horizontal, Template.WithTabs);
    Template.FrameByName['фреймСтр2'].Section[1].Row[1].NewPage = ВидОдинЛист;
    with Template.FrameByName['фреймНавигация'] do
      Visible = not ВидОдинЛист;
      CanHideBySplit = not ВидОдинЛист;
    end;
    Template.FrameByName['фреймОписаниеРаздела'].Visible = not ВидОдинЛист;
  end;

--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСоздании(Context :Variant);
    inherited шаблон_ПриСоздании(Context);
    Template.ObjectByName['кнНастройка'].Enabled = false;
  end;

  proc шаблон_ПриОткрытии(Create: Logical);
    var locCell: TemplateCell;
    inherited шаблон_ПриОткрытии(Create);
    --{ обновление списков полей
    locCell = Template.FrameByName['фреймДопСервис'].CellByField['ГодСв'];
    locCell.List.Clear;
    with Query.Create([ТББ_Базовый.Справочники.ПериодыРасчета]) do
      Filter = 'Match(Код,"????") and Код>="2010"'; Order = 'Код'; Select;
      while (not Eof) do locCell.List.Add(Current.Код + '|' + Current.Код); Next;
      od;
    end;--}
  end;

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    МодифициоватьШаблон;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    if (Cell.Owner.Name = 'секцУчреждение') and (Cell.Contents = '...'):
      if (НашеУчреждение <> nil):
        Бюджет_ЗПиДД.Справочники.Субъект.РедНашеУчреждение.Create.ShowEx(НашеУчреждение, Window.ModalWindow);
      fi;
    elsif (Cell.Owner.Name = 'секцСотрудник') and (Cell.Contents = 'q'):
      Интерфейс.ВычислитьДанные;
      МодифициоватьШаблон_Стр1;
    elsif (Cell.Owner.Name = 'секцСотрудник') and (Cell.Contents = '...'):
      if (Субъект <> nil):
        Бюджет_ЗПиДД.Справочники.Субъект.РедСотрудник.Create.ShowEx(Субъект, Window.ModalWindow);
      fi;
    fi;
  end;

  func Поле_ПриВводе (Cell :TemplateCell; Value :Variant) :Logical;
    if (Cell.Contents = 'ГодСв'):
      if (Value in [nil, 0]):
        Message('Отчетный год не может быть нулевым!');
      elsif (Int(Value) < 0):
        Message('Отчетный год не может быть отрицательным!');
      elsif (Int(Value) > 0) and (Int(Value) <> ГодСв):
        ГодСв = Int(Value);
        НомерБум = ТББ_Базовый.Нумератор.НовыйНомер(Record);
        Интерфейс.ВычислитьДанные;
        МодифициоватьШаблон;
      fi;
    fi;
  end;


  proc Поле_ПриВыходе (Cell: TemplateCell; Index: Integer);
    if (Cell.Contents = 'Субъект'):
      if (Субъект <> nil):
        НашеУчреждение = Субъект.НашеУчреждение;
      fi;
    else
      inherited Поле_ПриВыходе (Cell, Index);
    fi;
  end;

  --@doc Модификация заголовка формы (не окна)
  func ПолеЗаголовокОкнаФормы_ПриВыводе(Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    Result = 'Карточка учета гонораров';
    Result = Result + if(Субъект <> nil, Chr(13) + Субъект.Наим, Chr(13));
  end;

  --@doc Обработчик событий клеток титульной области формы
  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    func РеквизитыСубъекта: КарточкаГонораров.клРеквизитыСубъекта;
      Return if((Интерфейс <> nil), Интерфейс.GetField('РеквизитыСубъекта'), nil) as КарточкаГонораров.клРеквизитыСубъекта;
    end;
    if (Action = Template.Output):
      if (Cell.Contents = 'НомерБум'):
        Result = '<s+><u+>  ' +  Value + '  ';
      elsif (Cell.Contents = 'Дата'):
       Result = if((Интерфейс <> nil), Интерфейс.GetField('ДатаОкончания'), nil as date);
      elsif (Cell.Contents = 'ГодСв') and (Cell.Owner.ParentFrame.Name <> 'фреймДопСервис'):
        Result = if((ГодСв = 0), '<u+>      ', '<s+><s+><u+>  ' + Str(Value) + '  ');
      elsif (Cell.Contents = 'ГодСв') and (Cell.Owner.ParentFrame.Name = 'фреймДопСервис'):
        Result = if((ГодСв = 0), '', Value);
      elsif (Cell.Contents = 'НашеУчреждение.Наим'):
        Result = if((НашеУчреждение = nil), '<u+>' + RepStr(' ', 130), '<u+>  ' + Str(Value) + '  ');
      elsif (Cell.Contents = 'НашеУчреждение.ОКПО'):
        Result = if((НашеУчреждение = nil), nil, НашеУчреждение.ОКПО) as string;
      elsif (Cell.Contents = 'Субъект'):
        Result = if((Субъект = nil), '<s+><s+><u+>' + RepStr(' ', 50), '<s+><s+><b+><u+>  ' + Str(Субъект.Имя) + '  ');
      elsif (Cell.Contents = 'ТабНомер'):
        Result = if((Субъект = nil), nil, Субъект.ТабНомер) as string;
      -- вычисление через объект "локРеквизитыСубъекта"
      elsif (Cell.Contents = 'Субъект.ДатаРождения'):
        Value = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.ДатаРождения, nil) as date;
        Result = inherited ПолеДата_ПриВыводе (Cell, Value, Action, Format);
      elsif (Cell.Contents = 'Субъект.Документ.Имя'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.НаимДокумента, 'Паспорт') as string;
      elsif (Cell.Contents = 'Субъект.Документ.Серия'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.СерияДокумента, nil) as string;
        Result = if((Result <> nil), '<u+> ' + Result + ' ', '<u+>' + RepStr(' ', 15));
      elsif (Cell.Contents = 'Субъект.Документ.Номер'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.НомерДокумента, nil) as string;
        Result = if((Result <> nil), '<u+> ' + Result + ' ', '<u+>' + RepStr(' ', 15));
      elsif (Cell.Contents = 'Субъект.Документ.КогдаВыдан'):
        Value = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.ДатаДокумента, nil) as date;
        Result = inherited ПолеДата_ПриВыводе (Cell, Value, Action, Format);
      elsif (Cell.Contents = 'Субъект.Документ.КемВыдан'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.КемВыданДокумент, nil) as string;
        Result = if((Result <> nil), '<u+> ' + Result + ' ', '<u+>' + RepStr(' ', 80));
      elsif (Cell.Contents = 'Субъект.СНИЛС'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.СНИЛС, nil) as string;
        Result = if((Result <> nil), '<u+> ' + Result + ' ', '<u+>' + RepStr(' ', 25));
      elsif (Cell.Contents = 'Субъект.ИНН'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.ИНН, nil) as string;
        Result = if((Result <> nil), '<u+> ' + Result + ' ', '<u+>' + RepStr(' ', 25));
      elsif (Cell.Contents = 'Субъект.Адрес'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.АдресСтрокой, nil) as string;
        Result = if((Result <> nil), '<u+> ' + Result + ' ', '<u+>' + RepStr(' ', 100));
      elsif (Cell.Contents = 'Субъект.Телефон'):
        Result = if((РеквизитыСубъекта <> nil), РеквизитыСубъекта.Телефон, nil) as string;
        Result = if((Result <> nil), '<u+> ' + Result + ' ', '<u+>' + RepStr(' ', 30));
      fi;
    fi;
  end;

  func ПолеЗаголовкиСтолбцов_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
  end;

  func ПолеРасчеты_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var локТегСтроки: КарточкаГонораров.клТегСтроки;
    if (Action = Template.Output):
      локТегСтроки = Cell.Owner.Row[Cell.Row].Tag;
      if (локТегСтроки is КарточкаГонораров.клТегСтроки):
        локТегСтроки = Cell.Owner.Row[Cell.Row].Tag as КарточкаГонораров.клТегСтроки;
        if (Cell.Contents = 'Расчеты.Месяц'):
          Return локТегСтроки.МесяцГод as string;
        elsif (Cell.Contents = 'Расчеты.Издание'):
          Return локТегСтроки.ОписаниеПозиции as string;
        elsif (Cell.Contents = 'Расчеты.Начислено'):
          Return локТегСтроки.Начислено as numeric;
        elsif (Cell.Contents = 'Расчеты.НДФЛ'):
          Return локТегСтроки.УдержаноНДФЛ as numeric;
        elsif (Cell.Contents = 'Расчеты.ИЛ'):
          Return локТегСтроки.УдержаноИЛ as numeric;
        elsif (Cell.Contents = 'Расчеты.Прочего'):
          Return локТегСтроки.УдержаноПрочего as numeric;
        elsif (Cell.Contents = 'Расчеты.ИтогоУдержано'):
          Return локТегСтроки.УдержаноВсего as numeric;
        elsif (Cell.Contents = 'Расчеты.КВыдаче'):
          Return локТегСтроки.КВыдаче as numeric;
        elsif (Cell.Contents = 'Расчеты.ПлатДок'):
          Return локТегСтроки.ОписаниеПлатежныхДокументов as string;
        fi;
      fi;
    fi;
  end;


  proc Поле_ПриРисовании (Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
  end;
--}}


--{{ Обработчики событий прочих объектов шаблона

  proc кнВыборСотрудника_ПриНажатии (Sender: Button);
    var locSbj: Базовый.Данные.Субъект;
    var locChoose: integer;

    proc ВыборСотрудника;--{
      locSbj = Субъект;
      if CmOk = OpenCardfile('Справочники.Субъект.картСотрудник', locSbj, , Window.ModalWindow):
        Субъект = locSbj;
        if (НашеУчреждение <> Субъект.НашеУчреждение):
          НашеУчреждение = Субъект.НашеУчреждение;
          ЗаполнитьПодписи;
        end;
        Интерфейс.ВычислитьДанные;
        МодифициоватьШаблон;
      fi;
    end;--}

    if (Субъект = nil):
      ВыборСотрудника;
    else
      locChoose = Enquiry(, 'Выберите действие:', ['Просмотр карточки сотрудника ' + Субъект.ФамилияФизлица + ' ' + Субъект.ИмяФизЛица + ' ' + Субъект.ОтчествоФизЛица, 'Выбрать другого сотрудника' ]);
      if (locChoose = 1):
        Бюджет_ЗПиДД.Справочники.Субъект.РедСотрудник.Create.ShowEx(Субъект, Window.ModalWindow);
      elsif (locChoose = 2):
        ВыборСотрудника;
      fi;
    fi;
  end;

  proc кнРасчет_ПриНажатии (Sender: Button);
    Интерфейс.ВычислитьДанные;
    МодифициоватьШаблон;
  end;

  proc кнНастройка_ПриНажатии (Sender: Button);
  end;

  proc фл_ПриИзменении(Sender :CheckBox);
    ВидФормы;
  end;
--}}




end