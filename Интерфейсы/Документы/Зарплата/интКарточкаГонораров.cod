class inherited МашинаРеквизитов.Базовые.интЗапись "Интерфейс записи Документы.Зарплата.КарточкаГонораров";

Import СИС2 Classes Исключения, СтроковыеФункции;

inclass public

  func СвязанныйКлассЗаписей: Class СИС2.Базовая.БазоваяЗапись;
    Result = Документы.Зарплата.КарточкаГонораров;
  end;

  func Create: Документы.Зарплата.интКарточкаГонораров;
    var locRecord: Документы.Зарплата.КарточкаГонораров;
    Result = inherited Create;
    locRecord = Документы.Зарплата.КарточкаГонораров.Create;
    Result.SetRecord(locRecord);
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Документы.Зарплата.КарточкаГонораров): Документы.Зарплата.интКарточкаГонораров;
    Result = inherited Create;
    Result.SetRecord(locRecord);
  end;

  func БланкРедакторПоУмолчанию: Class BlankForm;
    Result = Документы.Зарплата.РедКарточкаГонораров;
  end;

  func КартотекаПоУмолчанию: Class CardForm;
    Result = nil;
  end;

inobject public

  Record: Документы.Зарплата.КарточкаГонораров;

  proc Инициализировать synonym Init;
    Assert(Record.State = Kernel.Record.Created);
  end;

  proc ИнициализироватьПоУмолчанию synonym InitByDefault;
    Init;
  end;

  proc ВычислитьДанные;
    УстановитьПериодАнализаДанных (Record.Субъект, Record.ГодСв); -- определение дат начала и окончания по году периодам назначений субъекта
    РеквизитыСубъекта = КарточкаГонораров.клРеквизитыСубъекта.CreateEx (Record.Субъект, ДатаНачала, ДатаОкончания);
    ИсторияРасчетов = ОбзорИсторииРасчетов(Record.Субъект, Record.ГодСв);
  end;

  func ВсегоПозиций: integer;
    Return LengthOfArray(ИсторияРасчетов);
  end;

  func ПозицияИсторииРасчетов (i: integer): КарточкаГонораров.клТегСтроки;
    Return ИсторияРасчетов[i];
  end;


inobject private

  --{ Поля

  var ДатаНачала: date; -- дата начала периода заполнения карточки
  var ДатаОкончания: date; -- дата окончания периода заполнения карточки
  var РеквизитыСубъекта: КарточкаГонораров.клРеквизитыСубъекта;
  var ВидыУдержаний: Бюджет_ЗПиДД.Справочники.ВидыУдержаний[];
  var ИсторияРасчетов: КарточкаГонораров.клТегСтроки[];
  --}

  --@doc Эта процедура наследует МР; На нее завязано изменение поля Record во всех методах интерфейса;
  proc SetRecord(locRecord: Документы.Зарплата.КарточкаГонораров);
    Inherited SetRecord(locRecord);
    ВычислитьДанные;
  end;

  proc УстановитьПериодАнализаДанных (локСубъект: Базовый.Данные.Субъект; локГодСв: integer);
    var ДатаНачалаГода, ДатаОкончанияГода: date;
    var locFlt: string[];
    if СИС2.Исключения.ПараметрыМетодаЗаданы([локСубъект,локГодСв], СИС2.Функции.FullClassName(Self.ClassInfo.ClassRef)): -- безопасное выполнение
      ДатаНачалаГода    = Dat(1, 1, локГодСв);
      ДатаОкончанияГода = Dat(31, 12, локГодСв);
      with Query.Create([Бюджет_Персонал.АтрибутыСотрудника.ПериодРаботы]) do
        locFlt[1] = 'Сотрудник=' + Str(локСубъект);
        locFlt[2] = ТББ_Базовый.Фильтры.ФильтрПоДатам(Dat(1, 1, локГодСв), Dat(31, 12, локГодСв));
        Filter = СИС2.СтроковыеФункции.СложитьСтрокиФильтраПоИ(locFlt);
        Order = 'ДатаНачала';
        if RecordsExists:
          Select;
          Self.ДатаНачала    = if(Current.ДатаНачала = nil, ДатаНачалаГода, Max([ДатаНачалаГода, Current.ДатаНачала]));
          Last;
          Self.ДатаОкончания = if(Current.ДатаОкончания = nil, ДатаОкончанияГода, Min([ДатаОкончанияГода, Current.ДатаОкончания]));
        fi;
      end;
    else
      ДатаНачала = nil;
      ДатаОкончания = nil;
    fi;
  end;


  func ОбзорИсторииРасчетов(локСубъект: Базовый.Данные.Субъект; локГодСв: integer): КарточкаГонораров.клТегСтроки[];
    var locFlt: string[];
    var p, pp: integer;
    var локТегСтроки: КарточкаГонораров.клТегСтроки;
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      -- формирование условия отбора записей
      locFlt[1] = 'Назначение.Сотрудник.Физлицо=' + Str(локСубъект.Физлицо);
      locFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(локГодСв) + '"';
      locFlt[3] = 'Расчет.Подшивка.Завершен';
      locFlt[4] = 'ВидНачисления.ТипРасчета.Код="' + Константы.КодШаблонаГонорар + '"';
      Filter = СИС2.СтроковыеФункции.СложитьСтрокиФильтраПоИ(locFlt);
      Order = 'Расчет.УчетныйПериод.Код;ПостояннаяОперация';
      pp = Count; -- общее кол-во позицй
      Select;
      for p = 1 .. pp do
        локТегСтроки = КарточкаГонораров.клТегСтроки.CreateEx (Current);
        СИС2.Функции.AddInArray(Result, локТегСтроки);
        Next;
      od;
    end;
  end;

end