class inherited ТББ_Базовый.Базовые.картДокумент "Карточки гонораров";

import СИС2 classes СтроковыеФункции;

inclass private

  var КлассИнтерфейса :Class МашинаРеквизитов.Базовые.интЗапись = Документы.Зарплата.интКарточкаГонораров;
  stored var ГодСв: integer;
  var ПолеСтолбцаНаше: String:= 'НашеУчреждение.Имя';

InObject private

  var ГодСвОбъекта: integer;

--{{ Вспомогательные методы

  --@doc Ф-я перекрывает СИС2, устанавливает фильтр на кртотеку через контролы шаблона
  func ПолучитьФильтрКартотеки(var locTreeFilter: string = nil): string;
    var StrArray: string[];
    ГодСвОбъекта = ГодСв;
    StrArray[1] = inherited ПолучитьФильтрКартотеки(locTreeFilter);
    StrArray[2] = if(ГодСвОбъекта > 0, 'ГодСв=' + Str(ГодСвОбъекта), nil);
    Result = СложитьСтрокиФильтраПоИ(StrArray);
  end;
--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриОткрытии(Create: Logical);
    var locCell: TemplateCell;
    ДобавитьПараметрНовойЗаписи('ГодСв', Year(today));
    ДобавитьПараметрНовойЗаписи('Дата', Dat(31, 12, Year(today)));
    Запретить_Дублирование = true;
    inherited шаблон_ПриОткрытии(Create); -- здесь выполнится в т.ч. проверка возможности заполенения полей, связанных с "нашим" учреждением
    --{ обновление списков полей
    locCell = Template.FrameByName['фреймФильтр'].CellByField['ГодСвОбъекта'];
    locCell.List.Clear;
    with Query.Create([ТББ_Базовый.Справочники.ПериодыРасчета]) do
      Filter = 'Match(Код,"????") and Код>="2015"'; Order = 'Код'; Select;
      while (not Eof) do locCell.List.Add(Current.Код + '|' + Current.Код); Next;
      od;
    end;--}
    --Template.ObjectByName['кнОбновить'].Enabled = false;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  proc Поле_ПриВыходе(Cell: TemplateCell; Index: Integer);
    if (Cell.Contents = 'НашеУчреждение'):
      ОбновитьФильтр;
      Template.CellByField['ГодСвОбъекта'].SetFocus;
    elsif (Cell.Contents = 'ГодСвОбъекта'):
      ГодСв = ГодСвОбъекта;
      ОбновитьФильтр;
    fi;
  end;

  func Поле_ПриВыводе(Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (Cell.Contents = 'НашеУчреждение'):
      if Cell.Value = nil:
        Result = '<i+><cf:Gray>Все учреждения';
      else
        Result = НашеУчреждение.Наим;
      fi;
    elsif (Cell.Contents = 'ГодСвОбъекта'):
      if Cell.Value = nil:
        Result = '<i+><cf:Gray>Все';
      else
        Result = ГодСвОбъекта;
      fi;
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона

  --@doc  Создание / обновление карточек сотрудников
  proc кнОбновить_ПриНажатии (Sender: Button);
    var locFlt: string[];
    var QResult: variant[2];
    var мСотрудник, мСотрудникКартГ: Базовый.Данные.Субъект[];
    var s, ss, k: integer;
    var newRecord: Документы.Зарплата.КарточкаГонораров;
    var Руководитель_: String;
    var ДолжностьРуководителя_: String;
    var Бухгалтер_: String;
    var ДолжностьБухгалтера_: String;
    if (НашеУчреждение <> nil) and (ГодСвОбъекта > 0):
      with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
        locFlt[1] = 'Назначение.Сотрудник.НашеУчреждение=' + Str(НашеУчреждение);
        locFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(ГодСвОбъекта) + '"';
        locFlt[3] = 'ВидНачисления.ТипРасчета.Код="' + КлассИнтерфейса.GetClassField('КодШаблонаГонорар') + '"';
        locFlt[4] = 'Расчет.Подшивка.Завершен';
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        Order = 'Назначение.Сотрудник.Наим';
        QResult = CalcAggregates('GroupBy(Назначение.Сотрудник)') as variant[2];
        мСотрудник = QResult[1] as Базовый.Данные.Субъект[];
      end;
      -- формирование массива сотрудников, для которых уже создана карточка
      locFlt = nil;
      with Query.Create([Документы.Зарплата.КарточкаГонораров]) do
        locFlt[1] = 'НашеУчреждение=' + Str(НашеУчреждение);
        locFlt[2] = 'ГодСв=' + Str(ГодСвОбъекта);
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        QResult = CalcAggregates('GroupBy(Субъект)') as variant[2];
        мСотрудникКартГ = QResult[1] as Базовый.Данные.Субъект[];
        SortArray(мСотрудникКартГ);
      end;
      --создание недостающих карточек
      ss = LengthOfArray(мСотрудник);
      for s = 1 .. ss do
        Hint('Создание карточек...', s, ss);
        k = SearchInArray(мСотрудникКартГ, мСотрудник[s]);
        if (k = -1):
          newRecord = Документы.Зарплата.КарточкаГонораров.Create;
          newRecord.НашеУчреждение = Self.НашеУчреждение;
          newRecord.ГодСв = Self.ГодСвОбъекта;
          newRecord.Субъект = мСотрудник[s];
          newRecord.Дата = today;
          newRecord.НомерБум = ТББ_Базовый.Нумератор.НовыйНомер(newRecord);
          newRecord.Валюта = ТББ_Базовый.Бухгалтерия.БазоваяВалюта;
          ТББ_Базовый.Библио.Подписи_НаДату(НашеУчреждение, today, , , Руководитель_, ДолжностьРуководителя_, Бухгалтер_, ДолжностьБухгалтера_);
          newRecord.ДатаПодписи = today;
          newRecord.Руководитель = Руководитель_;
          newRecord.ДолжностьРуководителя = ДолжностьРуководителя_;
          newRecord.Бухгалтер = Бухгалтер_;
          newRecord.ДолжностьБухгалтера = ДолжностьБухгалтера_;
          newRecord.Post;
        fi;
      od;
    else
      Message('Пожалуйста, укажите учреждение и год, за который создаются / обновляются карточки!');
    fi;
  end;
--}}


end