--class inherited ТББ_Базовый.Базовые.картБазовая "Учет стажа по договорам авторского заказа";
class inherited МашинаРеквизитов.Базовые.картСИнтерфейсом "Учет стажа по договорам авторского заказа";

  import СИС2 classes СтроковыеФункции, Функции, ФункцииДокумента;
  import Базовый classes Переменные;

inclass private

  var КлассИнтерфейса: Class МашинаРеквизитов.Базовые.интЗапись = УчетСтажа.интРасчетныйСтаж;
  stored var ГодСв: integer;
  var ПолеСтолбцаНаше: String:= 'НашеУчреждение.Имя';

InObject private

  var ГодСвОбъекта: integer;
  var НашеУчреждение: Базовый.Данные.Субъект;


--{{ Вспомогательные методы

  func ПолучитьФильтрКартотеки(var аФильтрДерева: String = nil): String;
    var locFlt: string[];
    var УчГод: string;
    locFlt[1] = inherited ПолучитьФильтрКартотеки(аФильтрДерева);
    -- обработка принадлежности к учреждению
    if (Базовый.Переменные.ТекущееНашеПредприятие <> nil or НашеУчреждение <> nil):
      -- Добавляем фильтр по предприятию только если поле с предприятием еще не присутствует в фильтре
      -- Иначе получается двойной фильтр (Возможен вариант с фильтром сразу по двум ссылкам, в результате ничего не выводится).
      -- Если ТекущееНашеПредприятие не совпадает с полем НашеУчреждение, предпочтение отдается локальному полю (см.ПриОткрытии);
      if not (WordInString(ПолеНаше, ФильтрПриОткрытии) or WordInString(ПолеНаше, ДополнительныйФильтр)):
        if (ТекущееНашеПредприятие <> nil): locFlt[2] = ПолеНаше + '=' + Str(ТекущееНашеПредприятие); fi;
        if (НашеУчреждение <> nil):         locFlt[2] = ПолеНаше + '=' + Str(НашеУчреждение); fi;
        locFlt[3] = СложитьСтрокиФильтраПоИЛИ([locFlt[2], ПолеНаше + '=nil']);
      fi;
    fi;
    -- обработка учетного года
    if (ГодСвОбъекта > 0):
      УчГод = SubStr(Str(ГодСвОбъекта), 1, 4);
      УчГод = if((Length(УчГод) < 4), PadL(УчГод, 4, '?'), УчГод);
      locFlt[4] = 'Match(Str(ГодСведений),"' + УчГод + '*")';
    fi;
    Result = СложитьСтрокиФильтраПоИ(locFlt);
    -- переформирование параметров новой записи
    ПараметрыНовойЗаписи = nil;
    if (ТекущееНашеПредприятие <> nil):
      ДобавитьПараметрНовойЗаписи ('НашеУчреждение',  ТекущееНашеПредприятие);
    fi;
    if (НашеУчреждение <> nil):
      ДобавитьПараметрНовойЗаписи ('НашеУчреждение',  НашеУчреждение);
    fi;
    if (ГодСвОбъекта > 0) and (ГодСвОбъекта < 99):
      ДобавитьПараметрНовойЗаписи ('ГодСведений',  ГодСвОбъекта + 2000);
    elsif (ГодСвОбъекта >= 99) and (ГодСвОбъекта < 999):
      ДобавитьПараметрНовойЗаписи ('ГодСведений',  ГодСвОбъекта + 1000);
    elsif (ГодСвОбъекта >= 999):
      ДобавитьПараметрНовойЗаписи ('ГодСведений',  ГодСвОбъекта);
    fi;
  end;


  --@doc Столбец для вывода наименования "Нашего" учреждения д.б. виден только тогда,
  --@doc когда сессия открыта на все "Наши" учреждения, и при этом "Наших" учреждений - несколько.
  --@doc Если "Наше" учреждение вообще единственное в инф.базе, или сессия
  --@doc открыта на конкретное "Наше" учреждение, то этот столбец лишний.
  proc УстановитьВидимостьСтолбцаНаше;
    var locColumn: CardfileColumn;
    locColumn = Self.Cardfile.ColumnByField[ПолеСтолбцаНаше];
    if (locColumn <> nil):
      locColumn.Visible = not(ТББ_Базовый.Библио.ЕдинственноеУчреждение);
    fi;
  end;

  --@doc Поле с таким именем используется для задания простого фильтра.
  --@doc Условия доступности см.выше.
  proc УстановитьВидПоляШаблонаНаше (FieldName: string = 'НашеУчреждение');
    var locCell: TemplateCell;
    locCell = Template.CellByField[FieldName];
    if (locCell <> nil):
      if ТББ_Базовый.Библио.ЕдинственноеУчреждение:
        locCell.Style = StyleByName('Поле вывода');
        locCell.Enabled = false;
      else
        locCell.Style = StyleByName('Поле выбора');
        locCell.Enabled = true;
      fi;
    fi;
  end;
--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриОткрытии(Create: Logical);
    var локВсеНашиУчреждения: Базовый.Данные.Субъект[];
    if Self.НашеУчреждение = nil: -- в случае, кгода переменной не переданно значение извне при создании экземпляра картотеки
      if ТББ_Базовый.Переменные.ТекущееНашеУчреждение <> nil: -- если сессия только на конкретное наше учреждение
        Self.НашеУчреждение = ТББ_Базовый.Переменные.ТекущееНашеУчреждение;
      else
        локВсеНашиУчреждения = ТББ_Базовый.Библио.ВсеНашиУчреждения;
        if LengthOfArray(локВсеНашиУчреждения) = 1 then
          Self.НашеУчреждение = локВсеНашиУчреждения[1];
        fi;
      fi;
    fi;
    inherited шаблон_ПриОткрытии(Create);
    УстановитьВидимостьСтолбцаНаше;
    УстановитьВидПоляШаблонаНаше;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  func ПолеШаблона_ПриВходе (Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    if (Cell.Contents = 'ГодСвОбъекта') and (Action <> Template.Clear):
      Return true;
    elsif (Cell.Contents = 'ГодСвОбъекта') and (Action = Template.Clear):
      ГодСвОбъекта = nil;
      ОбновитьФильтр;
    fi;
  end;

  proc ПолеШаблона_ПриВыходе (Cell: TemplateCell; Index: Integer);
    if (Cell.Contents = 'НашеУчреждение'):
      ОбновитьФильтр;
      Template.CellByField['ГодСвОбъекта'].SetFocus;
    elsif (Cell.Contents = 'ГодСвОбъекта'):
      ГодСв = ГодСвОбъекта;
      ОбновитьФильтр;
    fi;
  end;

  func ПолеШаблона_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var УчГод: string;
    if (Cell.Contents = 'НашеУчреждение'):
      if Cell.Value = nil:
        Result = '<i+><cf:Gray>Все учреждения';
      else
        Result = НашеУчреждение.Наим;
      fi;
    elsif (Cell.Contents = 'ГодСвОбъекта'):
      if (ГодСвОбъекта = nil):
        Result = '<i+><cf:Gray>Все';
      else
        УчГод = Str(ГодСвОбъекта);
        if (Length(УчГод) > 0) and  (Length(УчГод) < 4):
          Result = PadL(УчГод, 4, '?');
        else
          Result = ГодСвОбъекта;
        fi;
      fi;
    fi;
  end;
--}}

--{{ Обработчики событий картотеки

  func картотека_ПриСозданииЗаписи(var locRecord: ТББ_УчетГонораров.УчетСтажа.РасчетныйСтаж): Logical;
    var aStr: string[];
    var p, pp, локРешение, локГодСвд: integer;
    var locMess: string;
    var RR: Базовый.Данные.Субъект[];
    var локСубъект, локУчреждение: Базовый.Данные.Субъект;
    pp = LengthOfArray(ПараметрыНовойЗаписи);
    if (pp > 0):
      for p = 1 .. pp do
        if (ПараметрыНовойЗаписи[p,1] = 'НашеУчреждение'):
          aStr[p] = 'Учреждение - ' + ПараметрыНовойЗаписи[p,2].GetField('Имя');
          локУчреждение = ПараметрыНовойЗаписи[p,2] as Базовый.Данные.Субъект;
        fi;
        if ПараметрыНовойЗаписи[p,1] = 'ГодСведений':
          aStr[p] = 'Год сведений - ' + Str(ПараметрыНовойЗаписи[p,2]);
          локГодСвд = ПараметрыНовойЗаписи[p,2] as integer;
        fi;
      od;
      InsertInArray(aStr, 1, 'Создается запись для:');
      InsertInArray(aStr, 2, '');
      InsertInArray(aStr, LengthOfArray(aStr) + 1, '');
      InsertInArray(aStr, LengthOfArray(aStr) + 1, 'Пожалуйста, выберите сотрудника.');
      locMess = МассивСтрокВТекст(aStr);
    else
      locMess = 'Пожалуйста, выберите сотрудника.';
    fi;
    локРешение = Enquiry (, locMess, ['Отмена','Далее'], 2);
    if (локРешение = 2):
      if CmOk = ТББ_Базовый.Справочники.Субъект.картСотрудник.ВыполнитьВыбор(RR, локУчреждение):
        локСубъект = RR[1];
        locRecord = ТББ_УчетГонораров.УчетСтажа.РасчетныйСтаж.Create;
        locRecord.НашеУчреждение = локСубъект.НашеУчреждение;
        locRecord.ГодСведений = локГодСвд;
        locRecord.Субъект = локСубъект.ФизЛицо;
        OpenBlankEditor(self.CardFile.Editors[1].ClassName, locRecord);
      fi;
    fi;
  end;
--}}


--{{ Обработчики событий прочих объектов шаблона

  --@doc  Создание / обновление карточек
  proc кнОбновить_ПриНажатии (Sender: Button);
    var locFlt: string[];
    var locFilter: string;
    var локОбработанныеЗаписи: string[];
    var локЗаписьРасчетаСтажа: УчетСтажа.РасчетныйСтаж;
    var i, ii: integer;
    var локНачисленоГонораров: numeric;
    var локИнтерфейсЗаписи: УчетСтажа.интРасчетныйСтаж;
    if (НашеУчреждение <> nil) and (ГодСвОбъекта > 0) and (Length(Str(ГодСвОбъекта))=4):
      with Query.Create([Базовый.Данные.Субъект]) do
        locFlt[1] = 'Сотрудник';
        locFlt[2] = 'НашеУчреждение=' + Str(НашеУчреждение);
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        Select;
        ii = Count;
        locFlt = nil;
        locFlt[1] = 'НашеУчреждение=' + Str(НашеУчреждение);
        locFlt[2] = 'ГодСведений=' + Str(ГодСвОбъекта);
        while not Eof do
          i = i + 1;
          Hint('Выполнение...', i, ii);
          локНачисленоГонораров = Библио.НачисленоГонораров_ЗаГодБезСтажа (НашеУчреждение, ГодСвОбъекта, Current);
          if (локНачисленоГонораров > 0):
            locFlt[3] = 'Субъект=' + Str(Current.ФизЛицо);
            locFilter = СложитьСтрокиФильтраПоИ(locFlt);
            локЗаписьРасчетаСтажа = QueryRecord(ТББ_УчетГонораров.УчетСтажа.РасчетныйСтаж, locFilter);
            if (локЗаписьРасчетаСтажа <> nil) and (not(локЗаписьРасчетаСтажа.ExtId in локОбработанныеЗаписи)):
              локИнтерфейсЗаписи = УчетСтажа.интРасчетныйСтаж.OpenRecord (локЗаписьРасчетаСтажа);
              локИнтерфейсЗаписи.Расчет;
              локИнтерфейсЗаписи.Post;
              AddInArray(локОбработанныеЗаписи, локЗаписьРасчетаСтажа.ExtId);
            elsif (локЗаписьРасчетаСтажа = nil):
              локЗаписьРасчетаСтажа = ТББ_УчетГонораров.УчетСтажа.РасчетныйСтаж.Create;
              локЗаписьРасчетаСтажа.НашеУчреждение = НашеУчреждение;
              локЗаписьРасчетаСтажа.ГодСведений = ГодСвОбъекта;
              локЗаписьРасчетаСтажа.Субъект = Current.ФизЛицо;
              локИнтерфейсЗаписи = УчетСтажа.интРасчетныйСтаж.OpenRecord (локЗаписьРасчетаСтажа);
              локИнтерфейсЗаписи.Расчет;
              локИнтерфейсЗаписи.Post;
              AddInArray(локОбработанныеЗаписи, локЗаписьРасчетаСтажа.ExtId);
            fi;
          fi;
          Next;
        od;
      end;
      -- удаление лишних записей
      Hint('Удаление лишних записей...');
      with Query.Create([ТББ_УчетГонораров.УчетСтажа.РасчетныйСтаж]) do
        locFlt = nil;
        locFlt[1] = 'НашеУчреждение=' + Str(НашеУчреждение);
        locFlt[2] = 'ГодСведений=' + Str(ГодСвОбъекта);
        locFlt[3] = 'not(ExtId in ' + ToStr(локОбработанныеЗаписи) + ')';
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        IncludeDeleted  = true;
        Select;
        while not Eof do
          RecordDeleteEx (Current, false);
          Next;
        od;
      end;
    else
      Message('Пожалуйста, укажите учреждение и год (4 символа), за который создаются / обновляются карточки!');
    fi;
  end;
--}}


end